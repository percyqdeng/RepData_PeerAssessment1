t[4]
t['4']
t$4
t[1]
t['4']
t['1']
t['4'] - t['8']
debug(ls)
ls
ls()
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
quit
quit()
exit()
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
log(-1)
library(swirl()
)
swirl()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?vapply
?tapply
swirl()
?sample
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10, )
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, sizse = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, dev = 15)
rnorm(10, mean = 100, sd = 15)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean=10)
rpois(5, lambda =10)
my_pois = replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <-colMeans(my_pois)
cm
hist(cm)
?replications
swirl()
bye()
f1 <- gl(2,5)
f1
f2 <- gl(5,2)
f2
x<-rnorm(10)
split(x, f1)
x1
x
str(x)
library(swirl())
swirl()
0
info()
main()
bye()
head(mtcars)
tapply(mtcars$mpg, mtcars$carb, mean)
mtcars$mpg
tapply(mtcars, mtcars$carb, mean)
a <- function(x){}
a <- function(x){}
a <- function(x){ }
a <- function(x){ print x; invisible(x) }
a <- function(x){ print x; invisible(x) }
a <- function(x){ print x; invisible(x) }a <- function(x){
print(x)
invisible(x)
}
a <- function(x){
print(x)
invisible(x)
}
a(2)
b = a(2)
a(2)
a <- function(x){
print('lalala')
invisible(x)
}
a(2)
b = a(2)
b<- a(2)
a <- function(x){
print(x)
}
a(2)
b <- a(2)
a <- function(x){
x <-4
invisible(x)
}
a(2)
b <- function(x){
x<-9
invisible(x)
}
b(2)
b<- function(x){
x<-9
}
b(2)
a
a(2)
b(2)
c <- a(2)
d<-b(2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
a = xyplot(weight ~ Time | Diet, BodyWeight)
class(a)
?trellis
??trellis
print a
print 'a'
a
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot)
library(ggplot2)
library(ggplot)
install(ggplot
)
install.packages(ggplot2)
library(ggplot2)
library('ggplot2')
install.packages('ggplot2')
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, )
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
install.packages('xtable')
install.packages(xtable)
dir()
setwd('workspace/opencourse_hw/Reproducible Research/PA1/')
dir()
ls()
ls
ls()
dir()
getwd()
setwd('../RepData_PeerAssessment1/')
a = read.csv('activity.csv')
head(a)
library(ggplot2)
qplot(interval, data=a)
qplot(interval, data=a, fill=date)
?lapply
?tapply
tapply(a$interval, a$date, FUN = sum)
tapply(a$steps, a$date, FUN = sum)
tapply(a$steps, a$date, FUN = sum)
acti = read.csv('activity.csv')
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum)
steps_per_day
na.omit(acti)
steps_per_day
library(xtable)
x <- xtable(steps_per_day)
class(steps_per_day)
print(steps_per_day)
acti = na.omit(read.csv('activity.csv'))
acti
mean_per_day <- tapply(acti$steps, acti$date, FUN = mean)
mean_per_day
acti$date
head(acti)
is.na.data.frame(acti)
acti$date
nrow(acti)
acti$steps
nrow(acti$steps)
summary(acti)
na.fail(acti)
acti
acti
acti = na.omit(read.csv('activity.csv'))
summary(acti)
nrows(acti$steps)
nrow(acti$steps)
length(acti$steps)
length(acti$date)
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum)
print(steps_per_day, type='html')
acti
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum)
print(steps_per_day, type='html')
head(acti)
unique(acti$date)
levels(acti$date)
?levels
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum)
print(steps_per_day)
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum)
print(na.rm(steps_per_day))
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum)
print(na.omit(steps_per_day))
na.omit(steps_per_day)
print(steps_per_day)
print(steps_per_day, na.omit = TRUE)
na.omit(steps_per_day)
class(steps_per_day)
steps_per_day
steps_per_day[1]
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum, na.rm = TRUE)
steps_per_day
steps_per_day[!is.na(steps_per_day)]
medianmedian_per_day <- tapply(acti$steps, acti$date, FUN = median)
print(median_per_day[!is.na(median_per_day)], type='html')
median_per_day <- tapply(acti$steps, acti$date, FUN = median)
print(median_per_day[!is.na(median_per_day)], type='html')
?median
median_per_day <- tapply(acti$steps, acti$date, FUN = median, na.rm = TRUE)
print(median_per_day[!is.na(median_per_day)], type='html')
median(acti$steps)
avg_5_mins <- tapply(acti$steps, acti$interval, na.rm=TRUE)
avg_5_mins
length(unique(acti$interval))
acti$interval
acti$interval
unique(acti$interval)
avg_5_mins
avg_5_mins <- tapply(acti$steps, acti$interval, FUN =mean, na.rm=TRUE)
avg_5_mins
avg_5_mins <- tapply(acti$steps, acti$interval, FUN =mean, na.rm=TRUE)
qplot(unique(acti$interval), avg_5_mins)
?xlab
g <- qplot(unique(acti$interval), avg_5_mins)
g + labs(x = "timestep", y = "average steps")
plot(unique(acti$interval), avg_5_mins, type = 'l')
nrow(acti) - nrow(na.omit(acti))
acti
acti = read.csv('activity.csv')
nrow(acti) - nrow(na.omit(acti))
nrow(acti)
?na.fill
??na.fill
t = acti[is.na(acti)]
t
?impute
library(Hmisc)
?impute
steps_per_day
steps_per_day['2012-10-01']
steps_per_day[2012-10-01]
names(steps_per_day)
is.na(steps_per_day)
complete.cases(steps_per_day)
complete.cases(acti)
?complete.cases
acti
head(acti)
acti[is.na,]
acti[is.na(acti),]
class(acti[is.na(acti),1])
acti[is.na(acti),1]
avg_5_mins
lapply(acti[is.na(acti), ], FUN = function(x, y){y[x]}, y=avg_5_mins)
acti[1,1]
acti[1,3]
head(acti)
names(avg_5_mins)
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
m
c(1:10)
c(1:10, 11:20)
toString(acti[,3])
acti[is.na(acti), 1] = lapply(acti[is.na(acti), ], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
acti[is.na(acti), 1] = lapply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
avg_5_mins[toString(acti[1,3])]
apply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
apply(acti[is.na(acti), 3], FUN = function(x, y){return y[toString(x)]}, y=avg_5_mins)
vapply(acti[is.na(acti), 3], FUN = function(x, y){return y[toString(x)]}, y=avg_5_mins)
vapply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
t <- apply(acti[is.na(acti), 3], FUN = function(x, y){return y[toString(x)]}, y=avg_5_mins)
apply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
vapply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
vapply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
acti[is.na(acti), 3]
acti[is.na(acti)]
acti
head(acti)
acti[is.na(acti)]
?ggplot2
?ggplot
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum, na.rm = TRUE)
g <- ggplot(steps_per_day, aes(factor(acti$date)))
g + geom_bar()
print(g)
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum, na.rm = TRUE)
g <- ggplot(names(steps_per_day), steps_per_day, geom = "bar", aes(factor(acti$date)))
g <- ggplot(names(steps_per_day), steps_per_day, geom = "bar")
qplot(names(steps_per_dayclas))
class(steps_per_day)
ggplot(steps_per_day)
acti2
acti
head(acti)
barplot(steps_per_day)
library(ggplot2)
acti = read.csv('activity.csv')
head(acti)
head(acti)
head(acti2)
acti2 = acti
acti2[is.na(acti), 1] = lapply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
head(acti2)
head(acti)
acti2 = acti
acti2[is.na(acti), 1] = vapply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
steps_per_day <- tapply(acti2$steps, acti2$date, FUN = sum, na.rm = FALSE)
barplot(steps_per_day, xlab = 'date', ylab = 'number of steps', title(main = 'histogram (imputed data)'))
steps_per_day <- tapply(acti2$steps, acti2$date, FUN = sum, na.rm = FALSE)
barplot(steps_per_day, xlab = 'date', ylab = 'number of steps', title(main = 'histogram (imputed data)'))
steps_per_day <- tapply(acti2$steps, acti2$date, FUN = sum, na.rm = FALSE)
barplot(steps_per_day, xlab = 'date', ylab = 'number of steps', title(main = 'histogram (imputed data)'))
acti
steps_per_day
acti2
head(acti2)
acti2 = acti
acti2[is.na(acti), 1] = lapply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
steps_per_day <- tapply(acti2$steps, acti2$date, FUN = sum, na.rm = FALSE)
barplot(steps_per_day, xlab = 'date', ylab = 'number of steps', title(main = 'histogram (imputed data)'))
barplot(steps_per_day)
steps_per_day <- tapply(acti2$steps, acti2$date, FUN = sum, na.rm = FALSE)
barplot(steps_per_day, xlab = 'date', ylab = 'number of steps', title(main = 'histogram (imputed data)'))
steps_per_day
head(mtcars)
class(mtcars)
t = mtcars
t[, 2]
t[, 2] = lapply(t[,3], FUN = function(x, y){x+y},  y =1)
t
t[, 2] = vapply(t[,3], FUN = function(x, y){x+y},  y =1)
t[, 2] = apply(t[,3], FUN = function(x, y){x+y},  y =1)
t[, 2] = sapply(t[,3], FUN = function(x, y){x+y},  y =1)
t
weekdays(acti[,2])
acti[,2]
weekdays(acti[2,2])
acti[2,2]
acti[,2]
acti[,1]
acti[,2]
acti[3,2]
acti[444],2]
acti[444,2]
?tapply
?weekdays
as.POSIXct(acti[33,2])
weekdays(as.POSIXct(acti[33,2]))
as.POSIXct(acti[, 2])
as.POSIXct(acti[, 2])
weekdays(as.POSIXct(acti[33,2]))
acti3 = acti2
days = weekdays(as.POSIXct(acti3[,2]))
acti3$weekdays = (days != 'Saturday' & days != 'Sunday')
head(acti3)
?sapply
sapply
acti2 = acti
acti2[is.na(acti), 1] = sapply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
acti2 = acti
acti2[is.na(acti), 1] = vapply(acti[is.na(acti), 3], FUN = function(x, y){y[toString(x)]}, y=avg_5_mins)
steps_per_day
steps_per_day <- tapply(acti$steps, acti$date, FUN = sum, na.rm = TRUE)
steps_per_day
acti3 = acti2
days = weekdays(as.POSIXct(acti3[,2]))
acti3$weekdays = (days != 'Saturday' & days != 'Sunday')
head(acti3)
acti[acti$weekdays,]$steps
acti3[acti3$weekdays,]$steps
head(act3)
head(acti3)
acti3$haha =0
head(acti3)
acti3[ff]
acti3[1]
head(acti3)
acti_weekdays <- acti[acti$weekdays,]
acti_weekends <- acti[!acti$weekdays,]
acti3 = acti
days = weekdays(as.POSIXct(acti3[,2]))
acti3$weekdays = (days != 'Saturday' & days != 'Sunday')
acti3$avg = 0
acti3[acti3$weekdays, 'avg'] <- tapply(acti_weekdays$steps, acti_weekdays$interval, FUN =mean, na.rm=TRUE)
acti3[!acti3$weekdays, 'avg'] <- tapply(acti_weekends$steps, acti_weekends$interval, FUN =mean, na.rm=TRUE)
xyplot()
!acti$weekdaysacti3 = acti
days = weekdays(as.POSIXct(acti3[,2]))
acti3$weekdays = (days != 'Saturday' & days != 'Sunday')
acti_weekdays <- acti3[acti3$weekdays,]
acti_weekends <- acti3[!acti3$weekdays,]
acti3$avg = 0
acti3[acti3$weekdays, 'avg'] <- tapply(acti_weekdays$steps, acti_weekdays$interval, FUN =mean, na.rm=TRUE)
acti3[!acti3$weekdays, 'avg'] <- tapply(acti_weekends$steps, acti_weekends$interval, FUN =mean, na.rm=TRUE)
xyplot()
acti3 = acti
days = weekdays(as.POSIXct(acti3[,2]))
acti3$weekdays = (days != 'Saturday' & days != 'Sunday')
acti_weekdays <- acti3[acti3$weekdays,]
acti_weekends <- acti3[!acti3$weekdays,]
acti3$avg = 0
acti3[acti3$weekdays, 'avg'] <- tapply(acti_weekdays$steps, acti_weekdays$interval, FUN =mean, na.rm=TRUE)
acti3[!acti3$weekdays, 'avg'] <- tapply(acti_weekends$steps, acti_weekends$interval, FUN =mean, na.rm=TRUE)
xyplot(unique(interval, avg, data=acti3, type = 'l', xlab = 'intervals', ylab='# of steps')
)
acti3 = acti
days = weekdays(as.POSIXct(acti3[,2]))
acti3$weekdays = (days != 'Saturday' & days != 'Sunday')
acti_weekdays <- acti3[acti3$weekdays,]
acti_weekends <- acti3[!acti3$weekdays,]
acti3$avg = 0
acti3[acti3$weekdays, 'avg'] <- tapply(acti_weekdays$steps, acti_weekdays$interval, FUN =mean, na.rm=TRUE)
acti3[!acti3$weekdays, 'avg'] <- tapply(acti_weekends$steps, acti_weekends$interval, FUN =mean, na.rm=TRUE)
xyplot(unique(interval~avg|weekdays, data = acti3, type = 'l', xlab = 'intervals', ylab='# of steps', layout=c(2,1))
)
xyplot(interval~avg|weekdays, data = acti3, type = 'l', xlab = 'intervals', ylab='# of steps', layout=c(2,1))
xyplot(avg~interval|weekdays, data = acti3, type = 'l', xlab = 'intervals', ylab='# of steps', layout=c(2,1))
head(acti3)
xyplot(avg~interval|weekdays, data = acti3, xlab = 'intervals', ylab='# of steps', layout=c(2,1))
xyplot(avg~interval|weekdays, data = acti3,type='l', xlab = 'intervals', ylab='# of steps', layout=c(2,1))
acti3 = acti
days = weekdays(as.POSIXct(acti3[,2]))
acti3$weekdays = (days != 'Saturday' & days != 'Sunday')
acti_weekdays <- acti3[acti3$weekdays,]
acti_weekends <- acti3[!acti3$weekdays,]
acti3$avg = 0
acti3[acti3$weekdays, 'avg'] <- tapply(acti_weekdays$steps, acti_weekdays$interval, FUN =mean, na.rm=TRUE)
acti3[!acti3$weekdays, 'avg'] <- tapply(acti_weekends$steps, acti_weekends$interval, FUN =mean, na.rm=TRUE)
xyplot(avg~interval|weekdays, data = acti3,type='l', xlab = 'intervals', ylab='# of steps',
strip = strip.custom(factor.levels = c('Weekends', 'weekdays')), layout=c(2,1))
```
xyplot(avg~interval|weekdays, data = acti3,type='l', xlab = 'intervals', ylab='# of steps', strip = strip.custom(factor.levels = c('Weekends', 'weekdays')), layout=c(2,1))
acti3 = acti
days = weekdays(as.POSIXct(acti3[,2]))
acti3$weekdays = (days != 'Saturday' & days != 'Sunday')
acti_weekdays <- acti3[acti3$weekdays,]
acti_weekends <- acti3[!acti3$weekdays,]
acti3$avg = 0
acti3[acti3$weekdays, 'avg'] <- tapply(acti_weekdays$steps, acti_weekdays$interval, FUN =mean, na.rm=TRUE)
acti3[!acti3$weekdays, 'avg'] <- tapply(acti_weekends$steps, acti_weekends$interval, FUN =mean, na.rm=TRUE)
xyplot(avg~interval|weekdays, data = acti3,type='l', xlab = 'intervals', ylab='# of steps', strip = strip.custom(factor.levels = c('Weekends', 'Weekdays')), layout=c(2,1))
xyplot(avg~interval|weekdays, data = acti3,type='l')
acti3
?head
acti3[-3,]
nrows(acti3)
nrow(acti3)
nrow(acti)
nrow(acti3)
nrow(acti)
acti = read.csv('activity.csv')
nrow(acti)
acti3 = na.omit(acti)
nrow(acti3)
acti3[1,]
acti3[15264,]
